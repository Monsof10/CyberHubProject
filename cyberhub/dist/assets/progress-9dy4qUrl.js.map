{"version":3,"file":"progress-9dy4qUrl.js","sources":["../../src/supabase/progress.js"],"sourcesContent":["import { supabase } from './config'\r\n\r\n// User Progress Functions\r\nexport async function getUserProgress(userId) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('user_progress')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .single()\r\n    if (error && error.code !== 'PGRST116') throw error // PGRST116 is \"no rows returned\"\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error fetching user progress:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport async function createUserProgress(userId, progress) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('user_progress')\r\n      .insert([{\r\n        user_id: userId,\r\n        progress\r\n      }])\r\n      .single()\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error creating user progress:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport async function updateUserProgress(userId, progress) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('user_progress')\r\n      .update({ progress })\r\n      .eq('user_id', userId)\r\n      .single()\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error updating user progress:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// Course Functions\r\nexport async function getCourses() {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('courses')\r\n      .select('*')\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error fetching courses:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport async function getCourseById(courseId) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('courses')\r\n      .select('*')\r\n      .eq('id', courseId)\r\n      .single()\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error fetching course:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// Enrollment Functions\r\nexport async function enrollInCourse(userId, courseId) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('enrollments')\r\n      .insert([{\r\n        user_id: userId,\r\n        course_id: courseId,\r\n        status: 'active'\r\n      }])\r\n      .single()\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error enrolling in course:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport async function getUserEnrollments(userId) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('enrollments')\r\n      .select(`\r\n        *,\r\n        courses (*)\r\n      `)\r\n      .eq('user_id', userId)\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error fetching user enrollments:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport async function updateEnrollmentStatus(enrollmentId, status) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('enrollments')\r\n      .update({ \r\n        status,\r\n        completed_at: status === 'completed' ? new Date().toISOString() : null \r\n      })\r\n      .eq('id', enrollmentId)\r\n      .single()\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error updating enrollment status:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n// Course Progress Functions\r\nexport async function createCourseProgress(enrollmentId, module) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('course_progress')\r\n      .insert([{\r\n        enrollment_id: enrollmentId,\r\n        module,\r\n        status: 'in_progress',\r\n        quiz_scores: {},\r\n        last_accessed: new Date().toISOString()\r\n      }])\r\n      .single()\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error creating course progress:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport async function updateCourseProgress(progressId, updates) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('course_progress')\r\n      .update({\r\n        ...updates,\r\n        last_accessed: new Date().toISOString()\r\n      })\r\n      .eq('id', progressId)\r\n      .single()\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error updating course progress:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport async function getCourseProgress(enrollmentId) {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('course_progress')\r\n      .select('*')\r\n      .eq('enrollment_id', enrollmentId)\r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error fetching course progress:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport async function updateQuizScore(progressId, quizName, score) {\r\n  try {\r\n    const { data: currentProgress } = await supabase\r\n      .from('course_progress')\r\n      .select('quiz_scores')\r\n      .eq('id', progressId)\r\n      .single()\r\n\r\n    const updatedScores = {\r\n      ...currentProgress.quiz_scores,\r\n      [quizName]: score\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('course_progress')\r\n      .update({\r\n        quiz_scores: updatedScores,\r\n        last_accessed: new Date().toISOString()\r\n      })\r\n      .eq('id', progressId)\r\n      .single()\r\n    \r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('Error updating quiz score:', error)\r\n    throw error\r\n  }\r\n}\r\n"],"names":["getUserProgress","userId","data","error","supabase","from","select","eq","single","code","console","createUserProgress","progress","insert","user_id","updateUserProgress","update","getUserEnrollments","updateCourseProgress","progressId","updates","last_accessed","Date","toISOString"],"mappings":"wCAGO,eAAeA,EAAgBC,EAAQ,CAC5C,GAAI,CACF,KAAM,CAAEC,KAAAA,EAAMC,MAAAA,CAAO,EAAG,MAAMC,EAC3BC,KAAK,eAAe,EACpBC,OAAO,GAAG,EACVC,GAAG,UAAWN,CAAM,EACpBO,OAAQ,EACX,GAAIL,GAASA,EAAMM,OAAS,WAAY,MAAMN,EAC9C,OAAOD,CACR,OAAQC,EAAO,CACdO,cAAQP,MAAM,gCAAiCA,CAAK,EAC9CA,CACR,CACF,CAEO,eAAeQ,EAAmBV,EAAQW,EAAU,CACzD,GAAI,CACF,KAAM,CAAEV,KAAAA,EAAMC,MAAAA,CAAO,EAAG,MAAMC,EAC3BC,KAAK,eAAe,EACpBQ,OAAO,CAAC,CACPC,QAASb,EACTW,SAAAA,CACF,CAAC,CAAC,EACDJ,OAAQ,EACX,GAAIL,EAAO,MAAMA,EACjB,OAAOD,CACR,OAAQC,EAAO,CACdO,cAAQP,MAAM,gCAAiCA,CAAK,EAC9CA,CACR,CACF,CAEO,eAAeY,EAAmBd,EAAQW,EAAU,CACzD,GAAI,CACF,KAAM,CAAEV,KAAAA,EAAMC,MAAAA,CAAO,EAAG,MAAMC,EAC3BC,KAAK,eAAe,EACpBW,OAAO,CAAEJ,SAAAA,CAAU,CAAA,EACnBL,GAAG,UAAWN,CAAM,EACpBO,OAAQ,EACX,GAAIL,EAAO,MAAMA,EACjB,OAAOD,CACR,OAAQC,EAAO,CACdO,cAAQP,MAAM,gCAAiCA,CAAK,EAC9CA,CACR,CACF,CAkDO,eAAec,EAAmBhB,EAAQ,CAC/C,GAAI,CACF,KAAM,CAAEC,KAAAA,EAAMC,MAAAA,CAAO,EAAG,MAAMC,EAC3BC,KAAK,aAAa,EAClBC,OAAQ;AAAA;AAAA;AAAA,OAGR,EACAC,GAAG,UAAWN,CAAM,EACvB,GAAIE,EAAO,MAAMA,EACjB,OAAOD,CACR,OAAQC,EAAO,CACdO,cAAQP,MAAM,mCAAoCA,CAAK,EACjDA,CACR,CACF,CAyCO,eAAee,EAAqBC,EAAYC,EAAS,CAC9D,GAAI,CACF,KAAM,CAAElB,KAAAA,EAAMC,MAAAA,CAAO,EAAG,MAAMC,EAC3BC,KAAK,iBAAiB,EACtBW,OAAO,CACN,GAAGI,EACHC,cAAe,IAAIC,KAAI,EAAGC,YAAW,CACtC,CAAA,EACAhB,GAAG,KAAMY,CAAU,EACnBX,OAAQ,EACX,GAAIL,EAAO,MAAMA,EACjB,OAAOD,CACR,OAAQC,EAAO,CACdO,cAAQP,MAAM,kCAAmCA,CAAK,EAChDA,CACR,CACF"}