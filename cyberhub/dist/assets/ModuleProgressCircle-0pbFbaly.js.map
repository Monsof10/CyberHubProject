{"version":3,"file":"ModuleProgressCircle-0pbFbaly.js","sources":["../../src/components/ProgressCircle.jsx","../../src/constants/progressConstants.js","../../src/utils/progressUtils.js","../../src/components/ModuleProgressCircle.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst ProgressCircle = ({ progress }) => {\r\n  const radius = 18;\r\n  const stroke = 4;\r\n  const normalizedRadius = radius - stroke * 2;\r\n  const circumference = normalizedRadius * 2 * Math.PI;\r\n  const strokeDashoffset = circumference - (progress / 100) * circumference;\r\n\r\n  return (\r\n    <svg\r\n      height={radius * 2}\r\n      width={radius * 2}\r\n      style={{ display: 'block', margin: 'auto' }}\r\n    >\r\n      <circle\r\n        stroke=\"#001f3f\"\r\n        fill=\"transparent\"\r\n        strokeWidth={stroke}\r\n        strokeDasharray={circumference + ' ' + circumference}\r\n        style={{ strokeDashoffset, transition: 'stroke-dashoffset 0.35s' }}\r\n        r={normalizedRadius}\r\n        cx={radius}\r\n        cy={radius}\r\n      />\r\n      <text\r\n        x=\"50%\"\r\n        y=\"50%\"\r\n        dy=\".3em\"\r\n        textAnchor=\"middle\"\r\n        fontSize=\"12\"\r\n        fill=\"#001f3f\"\r\n      >\r\n        {progress}%\r\n      </text>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default ProgressCircle;\r\n","// Module status constants\r\nexport const MODULE_STATUS = {\r\n  // Article progress\r\n  ARTICLE_STARTED: 'article_started',\r\n  ARTICLE_COMPLETED: 'article_completed',\r\n  \r\n  // Initial quiz progress\r\n  INITIAL_QUIZ_STARTED: 'initial_quiz_started',\r\n  INITIAL_QUIZ_COMPLETED: 'initial_quiz_completed',\r\n  \r\n  // Lab progress\r\n  FIRST_LAB_STARTED: 'first_lab_started',\r\n  FIRST_LAB_COMPLETED: 'first_lab_completed',\r\n  SECOND_LAB_STARTED: 'second_lab_started',\r\n  SECOND_LAB_COMPLETED: 'second_lab_completed',\r\n  THIRD_LAB_STARTED: 'third_lab_started',\r\n  THIRD_LAB_COMPLETED: 'third_lab_completed',\r\n  \r\n  // Final quiz progress\r\n  FINAL_QUIZ_STARTED: 'final_quiz_started',\r\n  FINAL_QUIZ_COMPLETED: 'final_quiz_completed'\r\n};\r\n\r\n// Progress percentage within a level\r\nexport const MODULE_PROGRESS = {\r\n  // Article progress (0-16%)\r\n  [MODULE_STATUS.ARTICLE_STARTED]: 0,\r\n  [MODULE_STATUS.ARTICLE_COMPLETED]: 16,\r\n  \r\n  // Initial quiz progress (16-32%)\r\n  [MODULE_STATUS.INITIAL_QUIZ_STARTED]: 16,\r\n  [MODULE_STATUS.INITIAL_QUIZ_COMPLETED]: 32,\r\n  \r\n  // Lab progress (32-80%)\r\n  [MODULE_STATUS.FIRST_LAB_STARTED]: 32,\r\n  [MODULE_STATUS.FIRST_LAB_COMPLETED]: 48,\r\n  [MODULE_STATUS.SECOND_LAB_STARTED]: 48,\r\n  [MODULE_STATUS.SECOND_LAB_COMPLETED]: 64,\r\n  [MODULE_STATUS.THIRD_LAB_STARTED]: 64,\r\n  [MODULE_STATUS.THIRD_LAB_COMPLETED]: 80,\r\n  \r\n  // Final quiz progress (80-100%)\r\n  [MODULE_STATUS.FINAL_QUIZ_STARTED]: 80,\r\n  [MODULE_STATUS.FINAL_QUIZ_COMPLETED]: 100\r\n};\r\n\r\n// Module display names\r\nexport const MODULE_NAMES = {\r\n  [MODULE_STATUS.ARTICLE_STARTED]: 'Course Material',\r\n  [MODULE_STATUS.INITIAL_QUIZ_STARTED]: 'Initial Quiz',\r\n  [MODULE_STATUS.FIRST_LAB_STARTED]: 'Basic Lab',\r\n  [MODULE_STATUS.SECOND_LAB_STARTED]: 'Intermediate Lab',\r\n  [MODULE_STATUS.THIRD_LAB_STARTED]: 'Advanced Lab',\r\n  [MODULE_STATUS.FINAL_QUIZ_COMPLETED]: 'Final Quiz'\r\n};\r\n\r\n// Module sequence order\r\nexport const MODULE_ORDER = [\r\n  MODULE_STATUS.ARTICLE_STARTED,\r\n  MODULE_STATUS.INITIAL_QUIZ_STARTED,\r\n  MODULE_STATUS.FIRST_LAB_STARTED,\r\n  MODULE_STATUS.SECOND_LAB_STARTED,\r\n  MODULE_STATUS.THIRD_LAB_STARTED,\r\n  MODULE_STATUS.FINAL_QUIZ_COMPLETED\r\n];\r\n\r\n// Level constants\r\nexport const LEVELS = {\r\n  BEGINNER: 1,\r\n  BASIC: 2,\r\n  INTERMEDIATE: 3,\r\n  ADVANCED: 4,\r\n  EXPERT: 5\r\n};\r\n\r\n// Each level represents 20% of total course progress\r\nexport const LEVEL_PROGRESS_WEIGHT = 20;\r\n\r\n// Level names\r\nexport const LEVEL_NAMES = {\r\n  [LEVELS.BEGINNER]: 'Beginner',\r\n  [LEVELS.BASIC]: 'Basic',\r\n  [LEVELS.INTERMEDIATE]: 'Intermediate',\r\n  [LEVELS.ADVANCED]: 'Advanced',\r\n  [LEVELS.EXPERT]: 'Expert'\r\n};\r\n","import { \r\n  MODULE_STATUS, \r\n  MODULE_PROGRESS, \r\n  MODULE_ORDER,\r\n  LEVEL_PROGRESS_WEIGHT \r\n} from '../constants/progressConstants';\r\n\r\n// Calculate progress for a single module within a level\r\nexport const calculateModuleProgress = (module) => {\r\n  if (!module) return 0;\r\n  \r\n  // If component_progress exists, calculate progress based on it\r\n  if (module.component_progress) {\r\n    const cp = module.component_progress;\r\n    if (cp.final_quiz.completed) return 100;\r\n    if (cp.final_quiz.started) return 80;\r\n    if (cp.labs.third.completed) return 80;\r\n    if (cp.labs.third.started) return 64;\r\n    if (cp.labs.second.completed) return 64;\r\n    if (cp.labs.second.started) return 48;\r\n    if (cp.labs.first.completed) return 48;\r\n    if (cp.labs.first.started) return 32;\r\n    if (cp.initial_quiz.completed) return 32;\r\n    if (cp.initial_quiz.started) return 16;\r\n    if (cp.article.completed) return 16;\r\n    if (cp.article.started) return 0;\r\n    return 0;\r\n  }\r\n  \r\n  // Fallback to old status-based progress\r\n  return MODULE_PROGRESS[module.status] || 0;\r\n};\r\n\r\n// Calculate overall level progress (0-100%)\r\nexport const calculateLevelProgress = (levelProgress) => {\r\n  if (!levelProgress || levelProgress.length === 0) return 0;\r\n  \r\n  // Find the highest progress state for each component\r\n  let articleProgress = 0;\r\n  let quizProgress = 0;\r\n  let labProgress = 0;\r\n  let finalQuizProgress = 0;\r\n  \r\n  levelProgress.forEach(module => {\r\n    const progress = calculateModuleProgress(module);\r\n    const status = module.status;\r\n    \r\n    // Update component progress based on status\r\n    if (status.includes('article')) {\r\n      articleProgress = Math.max(articleProgress, progress);\r\n    } else if (status.includes('initial_quiz')) {\r\n      quizProgress = Math.max(quizProgress, progress);\r\n    } else if (status.includes('lab')) {\r\n      labProgress = Math.max(labProgress, progress);\r\n    } else if (status.includes('final_quiz')) {\r\n      finalQuizProgress = Math.max(finalQuizProgress, progress);\r\n    }\r\n  });\r\n  \r\n  // Return the highest progress achieved\r\n  return Math.max(articleProgress, quizProgress, labProgress, finalQuizProgress);\r\n};\r\n\r\n// Calculate overall course progress (0-100%)\r\nexport const calculateCourseProgress = (levels) => {\r\n  if (!levels || levels.length === 0) return 0;\r\n  \r\n  // Each completed level contributes LEVEL_PROGRESS_WEIGHT% to total progress\r\n  let totalProgress = 0;\r\n  levels.forEach(level => {\r\n    const levelProgress = calculateLevelProgress(level.modules);\r\n    if (levelProgress === 100) {\r\n      totalProgress += LEVEL_PROGRESS_WEIGHT;\r\n    }\r\n  });\r\n  \r\n  return totalProgress;\r\n};\r\n\r\n// Check if a module should be locked based on previous module completion\r\nexport const isModuleLocked = (currentStatus, previousModuleStatus) => {\r\n  if (!previousModuleStatus) return false;\r\n  \r\n  // Get the component types\r\n  const currentComponent = getComponentType(currentStatus);\r\n  const previousComponent = getComponentType(previousModuleStatus);\r\n  \r\n  // If they're different components, previous must be completed\r\n  if (currentComponent !== previousComponent) {\r\n    return !previousModuleStatus.includes('completed');\r\n  }\r\n  \r\n  // For same component, just check the sequence\r\n  const currentIndex = MODULE_ORDER.indexOf(currentStatus);\r\n  const previousIndex = MODULE_ORDER.indexOf(previousModuleStatus);\r\n  return currentIndex > previousIndex && !previousModuleStatus.includes('completed');\r\n};\r\n\r\n// Helper function to get component type from status\r\nconst getComponentType = (status) => {\r\n  if (!status) return '';\r\n  if (status.includes('article')) return 'article';\r\n  if (status.includes('initial_quiz')) return 'initial_quiz';\r\n  if (status.includes('lab')) return 'lab';\r\n  if (status.includes('final_quiz')) return 'final_quiz';\r\n  return '';\r\n};\r\n\r\n// Get the next module in sequence\r\nexport const getNextModule = (currentStatus) => {\r\n  const currentIndex = MODULE_ORDER.indexOf(currentStatus);\r\n  if (currentIndex < 0 || currentIndex >= MODULE_ORDER.length - 1) return null;\r\n  return MODULE_ORDER[currentIndex + 1];\r\n};\r\n\r\n// Check if a level is completed\r\nexport const isLevelCompleted = (levelProgress) => {\r\n  return calculateLevelProgress(levelProgress) === 100;\r\n};\r\n\r\n// Get module completion status text\r\nexport const getModuleStatusText = (module) => {\r\n  if (!module) return 'Not Started';\r\n  \r\n  if (module.component_progress) {\r\n    const cp = module.component_progress;\r\n    if (cp.final_quiz.completed) return 'Final Quiz Completed';\r\n    if (cp.final_quiz.started) return 'Final Quiz Started';\r\n    if (cp.labs.third.completed) return 'Advanced Lab Completed';\r\n    if (cp.labs.third.started) return 'Advanced Lab Started';\r\n    if (cp.labs.second.completed) return 'Intermediate Lab Completed';\r\n    if (cp.labs.second.started) return 'Intermediate Lab Started';\r\n    if (cp.labs.first.completed) return 'Basic Lab Completed';\r\n    if (cp.labs.first.started) return 'Basic Lab Started';\r\n    if (cp.initial_quiz.completed) return 'Initial Quiz Completed';\r\n    if (cp.initial_quiz.started) return 'Initial Quiz Started';\r\n    if (cp.article.completed) return 'Course Material Completed';\r\n    if (cp.article.started) return 'Course Material Started';\r\n    return 'Not Started';\r\n  }\r\n\r\n  if (module.completed) return 'Completed';\r\n  return 'In Progress';\r\n};\r\n\r\n// Format progress percentage for display\r\nexport const formatProgress = (progress) => {\r\n  return `${Math.round(progress)}%`;\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport ProgressCircle from './ProgressCircle';\r\nimport { MODULE_NAMES } from '../constants/progressConstants';\r\nimport { calculateModuleProgress, isModuleLocked, getModuleStatusText } from '../utils/progressUtils';\r\n\r\nconst ModuleProgressCircle = ({ module, previousModuleStatus, size = 'medium' }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const progress = calculateModuleProgress(module);\r\n  const locked = isModuleLocked(module?.status, previousModuleStatus);\r\n  const name = MODULE_NAMES[module?.status] || 'Module';\r\n  const status = getModuleStatusText(module);\r\n\r\n  useEffect(() => {\r\n    setIsVisible(true);\r\n  }, []);\r\n\r\n  const sizes = {\r\n    small: {\r\n      container: '100px',\r\n      circle: 35,\r\n      fontSize: '12px'\r\n    },\r\n    medium: {\r\n      container: '120px',\r\n      circle: 40,\r\n      fontSize: '14px'\r\n    },\r\n    large: {\r\n      container: '150px',\r\n      circle: 50,\r\n      fontSize: '16px'\r\n    }\r\n  };\r\n\r\n  const sizeConfig = sizes[size];\r\n\r\n  const getColor = () => {\r\n    if (locked) return '#ccc';\r\n    if (progress === 100) return '#4CAF50';\r\n    if (progress > 0) return '#FFD740';\r\n    return '#1A237E';\r\n  };\r\n\r\n  const containerStyle = {\r\n    position: 'fixed',\r\n    bottom: '120px',\r\n    left: '1px',\r\n    opacity: isVisible ? 1 : 0,\r\n    transition: 'opacity 0.5s ease-out',\r\n    zIndex: 1000,\r\n    backgroundColor: 'rgba(26, 35, 126, 0.9)',\r\n    borderRadius: '12px',\r\n    padding: '15px',\r\n    boxShadow: '0 4px 15px rgba(0, 0, 0, 0.2)',\r\n    backdropFilter: 'blur(10px)',\r\n    border: '1px solid rgba(255, 255, 255, 0.1)',\r\n    width: sizeConfig.container\r\n  };\r\n\r\n  return (\r\n    <div style={containerStyle}>\r\n      <div style={{ \r\n        position: 'relative',\r\n        marginBottom: '10px',\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n      }}>\r\n        <ProgressCircle \r\n          progress={progress} \r\n          radius={sizeConfig.circle}\r\n          stroke={4}\r\n          primaryColor={getColor()}\r\n          secondaryColor=\"rgba(255, 255, 255, 0.2)\"\r\n        />\r\n        {locked && (\r\n          <div style={{\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            fontSize: '20px'\r\n          }}>\r\n            🔒\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div style={{\r\n        textAlign: 'center',\r\n        fontSize: sizeConfig.fontSize,\r\n        color: '#fff',\r\n        marginTop: '5px',\r\n        fontWeight: '500'\r\n      }}>\r\n        {name}\r\n      </div>\r\n\r\n      <div style={{\r\n        textAlign: 'center',\r\n        fontSize: sizeConfig.fontSize,\r\n        color: progress === 100 ? '#4CAF50' : 'rgba(255, 255, 255, 0.7)',\r\n        marginTop: '5px'\r\n      }}>\r\n        {status}\r\n      </div>\r\n\r\n      {progress === 100 && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '5px',\r\n          right: '5px',\r\n          backgroundColor: '#4CAF50',\r\n          color: 'white',\r\n          borderRadius: '50%',\r\n          width: '24px',\r\n          height: '24px',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          fontSize: '14px',\r\n          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)'\r\n        }}>\r\n          ✓\r\n        </div>\r\n      )}\r\n\r\n      {progress > 0 && progress < 100 && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '5px',\r\n          right: '5px',\r\n          backgroundColor: 'rgba(255, 215, 64, 0.9)',\r\n          color: '#1A237E',\r\n          borderRadius: '12px',\r\n          padding: '3px 8px',\r\n          fontSize: '12px',\r\n          fontWeight: '600',\r\n          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'\r\n        }}>\r\n          {progress}%\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModuleProgressCircle;\r\n"],"names":["ProgressCircle","progress","circumference","normalizedRadius","Math","PI","strokeDashoffset","jsxs","height","radius","width","style","display","margin","children","jsx","stroke","fill","strokeWidth","strokeDasharray","transition","r","cx","cy","x","y","dy","textAnchor","fontSize","MODULE_STATUS","ARTICLE_STARTED","ARTICLE_COMPLETED","INITIAL_QUIZ_STARTED","INITIAL_QUIZ_COMPLETED","FIRST_LAB_STARTED","FIRST_LAB_COMPLETED","SECOND_LAB_STARTED","SECOND_LAB_COMPLETED","THIRD_LAB_STARTED","THIRD_LAB_COMPLETED","FINAL_QUIZ_STARTED","FINAL_QUIZ_COMPLETED","MODULE_PROGRESS","MODULE_NAMES","MODULE_ORDER","calculateModuleProgress","module","component_progress","cp","final_quiz","completed","started","labs","third","second","first","initial_quiz","article","status","isModuleLocked","currentStatus","previousModuleStatus","currentComponent","getComponentType","previousComponent","includes","currentIndex","indexOf","previousIndex","getModuleStatusText","ModuleProgressCircle","size","isVisible","setIsVisible","useState","locked","name","useEffect","sizeConfig","small","container","circle","medium","large","getColor","containerStyle","position","bottom","left","opacity","zIndex","backgroundColor","borderRadius","padding","boxShadow","backdropFilter","border","marginBottom","justifyContent","primaryColor","secondaryColor","top","transform","textAlign","color","marginTop","fontWeight","right","alignItems"],"mappings":"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"}